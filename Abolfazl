import os
import time
import random
import numpy as np
from selenium import webdriver
from selenium.webdriver.common.by import By
from telegram import Bot
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# خواندن متغیرهای محیطی
TELEGRAM_TOKEN = os.getenv("7597780702:AAFHOosF6-OGZMVQkz_quqEUv1ZgbXuW2Fk")
CHAT_ID = os.getenv("6723345169")

# لینک سایت بازی
SITE_URL = 'https://bc.game/fa/game/crash'

# تنظیمات WebDriver
options = webdriver.ChromeOptions()
options.add_argument("--headless")  # اجرا بدون باز کردن مرورگر
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
driver = webdriver.Chrome(executable_path='/usr/lib/chromium-browser/chromedriver', options=options)

# باز کردن سایت بازی BC.Game
def open_site():
    driver.get(SITE_URL)
    print("سایت بازی باز شد. لطفاً وارد بازی شوید.")

# بررسی ورود به بازی
def wait_for_game():
    while True:
        try:
            game_element = driver.find_element(By.CLASS_NAME, "game-crash")
            print("شما وارد بازی شده‌اید. ربات شروع به کار می‌کند.")
            return
        except:
            print("لطفاً وارد بازی شوید...")
            time.sleep(5)

# استخراج داده‌ها
def get_game_data():
    try:
        crash_multiplier = driver.find_element(By.ID, "game-multiplier").text
        return float(crash_multiplier)
    except Exception as e:
        print("خطا در استخراج داده‌ها:", e)
        return None

# ارسال نتیجه به ربات تلگرام
def send_to_telegram(message):
    bot = Bot(token=TELEGRAM_TOKEN)
    bot.send_message(chat_id=CHAT_ID, text=message)

# پیش‌بینی ضریب بعدی (رگرسیون خطی)
def linear_regression_predict(data):
    if len(data) < 5:
        return random.uniform(0.1, 1000.0)
    X = np.array(range(len(data))).reshape(-1, 1)
    y = np.array(data).reshape(-1, 1)
    reg = LinearRegression()
    reg.fit(X, y)
    next_index = len(data)
    prediction = reg.predict([[next_index]])
    return prediction[0][0]

# پیش‌بینی ضریب بعدی (شبکه عصبی)
def neural_network_predict(data):
    if len(data) < 5:
        return random.uniform(0.1, 1000.0)
    X = np.array(range(len(data))).reshape(-1, 1)
    y = np.array(data).reshape(-1, 1)
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    model = Sequential()
    model.add(Dense(64, input_dim=1, activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1))
    model.compile(loss='mse', optimizer='adam')
    model.fit(X_scaled, y, epochs=200, batch_size=5, verbose=0)
    next_index = len(data)
    prediction = model.predict(scaler.transform([[next_index]]))
    return prediction[0][0]

# پیش‌بینی ضریب بعدی (میانگین متحرک)
def predict_next_multiplier(data):
    if len(data) >= 5:
        avg = sum(data[-5:]) / 5
        return avg + random.uniform(0, 0.5)
    else:
        return random.uniform(0.1, 1000.0)

# اجرای اصلی ربات
def main():
    open_site()
    wait_for_game()
    history = []
    while True:
        crash_multiplier = get_game_data()
        if crash_multiplier:
            print(f"ضریب فعلی: {crash_multiplier}")
            history.append(crash_multiplier)
            next_multiplier_linear = linear_regression_predict(history)
            next_multiplier_nn = neural_network_predict(history)
            next_multiplier_avg = predict_next_multiplier(history)
            print(f"پیش‌بینی ضریب بعدی (رگرسیون خطی): {next_multiplier_linear}")
            print(f"پیش‌بینی ضریب بعدی (شبکه عصبی): {next_multiplier_nn}")
            print(f"پیش‌بینی ضریب بعدی (میانگین متحرک): {next_multiplier_avg}")
            send_to_telegram(f"ضریب فعلی: {crash_multiplier}\n"
                              f"پیش‌بینی ضریب بعدی (رگرسیون خطی): {next_multiplier_linear}\n"
                              f"پیش‌بینی ضریب بعدی (شبکه عصبی): {next_multiplier_nn}\n"
                              f"پیش‌بینی ضریب بعدی (میانگین متحرک): {next_multiplier_avg}")
        time.sleep(random.choice([2, 3]))

# اجرای کد
if __name__ == "__main__":
    main()
